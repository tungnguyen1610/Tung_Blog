<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>T_Blog - Automotive</title><link href="/" rel="alternate"></link><link href="/feeds/automotive.atom.xml" rel="self"></link><id>/</id><updated>2025-05-11T00:00:00+07:00</updated><entry><title>CAN network</title><link href="/automotive/can-network.html" rel="alternate"></link><published>2025-05-11T00:00:00+07:00</published><updated>2025-05-11T00:00:00+07:00</updated><author><name>Tung Nguyen</name></author><id>tag:None,2025-05-11:/automotive/can-network.html</id><summary type="html">&lt;p&gt;CAN communication in electric control unit (ECU).&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The Controller Area Network (CAN) is a robust vehicle bus standard designed to allow microcontrollers and devices to communicate with each other within a vehicle without a host computer. It is widely used in automotive ECUs (Electronic Control Units) for real-time communication.&lt;/p&gt;
&lt;h2&gt;CAN Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Differential Signaling (CAN High and CAN Low):&lt;/strong&gt;&lt;br&gt;
  Uses two wires (CAN_H and CAN_L) for noise-resistant communication. The signal is represented using:&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dominant bit:&lt;/strong&gt; Logical 0 (CAN_H - CAN_L ~ 2 V)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Recessive bit:&lt;/strong&gt; Logical 1 (CAN_H - CAN_L ~ 0 V)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Broadcast Communication:&lt;/strong&gt;&lt;br&gt;
  All nodes on the CAN bus can "hear" every transmission. Nodes determine if the message is relevant by filtering IDs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Arbitration Field:&lt;/strong&gt;&lt;br&gt;
  When multiple ECUs transmit simultaneously, CAN uses priority-based arbitration. Lower ID values have higher priority.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CAN Frame Structure:&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Identifier (ID):&lt;/strong&gt; Determines the priority of the message.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RTR (Remote Transmission Request):&lt;/strong&gt; Indicates if the frame is a data frame or a remote request.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Length:&lt;/strong&gt; Number of bytes in the data field (0â€“8 for classic CAN, up to 64 in CAN FD).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Payload:&lt;/strong&gt; The actual data being transmitted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CRC (Cyclic Redundancy Check):&lt;/strong&gt; Ensures data integrity.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Components:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Microcontroller (MCU):&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Has dedicated CAN controller hardware.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Communicates using two digital lines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CAN_TX&lt;/strong&gt;: Transmit line from MCU to the CAN transceiver.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CAN_RX&lt;/strong&gt;: Receive line from the CAN transceiver to the MCU.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CAN Transceiver:&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Converts digital signals (TX/RX) from the microcontroller into differential voltages on the CAN bus (CAN_H and CAN_L).&lt;/li&gt;
&lt;li&gt;Also converts bus voltages back to digital signals for the MCU.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensures compliance with ISO 11898 (physical layer spec).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CAN Bus:&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Two-wire twisted pair: &lt;strong&gt;CAN_H&lt;/strong&gt; and &lt;strong&gt;CAN_L&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Terminated at both ends with 120-ohm resistors to prevent signal reflections.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;CAN communication is critical in modern automotive systems for enabling reliable, prioritized, and synchronized data exchange between ECUs.&lt;/p&gt;</content><category term="Automotive"></category><category term="Communication"></category><category term="CAN"></category></entry><entry><title>Embedded C structure</title><link href="/automotive/embedded-c-structure.html" rel="alternate"></link><published>2025-05-11T00:00:00+07:00</published><updated>2025-05-11T00:00:00+07:00</updated><author><name>Tung Nguyen</name></author><id>tag:None,2025-05-11:/automotive/embedded-c-structure.html</id><summary type="html">&lt;p&gt;struct, bit-field and union use cases&lt;/p&gt;</summary><content type="html"></content><category term="Automotive"></category><category term="struct"></category><category term="union"></category><category term="bitfield"></category></entry></feed>