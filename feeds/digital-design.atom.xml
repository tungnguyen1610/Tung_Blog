<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>T_Blog - Digital Design</title><link href="https://tungnguyen1610.github.io/Tung_Blog/" rel="alternate"></link><link href="https://tungnguyen1610.github.io/Tung_Blog/feeds/digital-design.atom.xml" rel="self"></link><id>https://tungnguyen1610.github.io/Tung_Blog/</id><updated>2025-05-10T00:00:00+07:00</updated><entry><title>FPGA Basics</title><link href="https://tungnguyen1610.github.io/Tung_Blog/digital-design/fpga-basics.html" rel="alternate"></link><published>2025-05-10T00:00:00+07:00</published><updated>2025-05-10T00:00:00+07:00</updated><author><name>Tung Nguyen</name></author><id>tag:tungnguyen1610.github.io,2025-05-10:/Tung_Blog/digital-design/fpga-basics.html</id><summary type="html">&lt;p&gt;Introduction to FPGA development and applications.&lt;/p&gt;</summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Field-Programmable Gate Arrays (FPGAs) are integrated circuits that can be configured by the user after manufacturing...&lt;/p&gt;</content><category term="Digital Design"></category><category term="fpga"></category><category term="verilog"></category><category term="hardware"></category></entry><entry><title>General Concepts in Digital Design</title><link href="https://tungnguyen1610.github.io/Tung_Blog/digital-design/general-digital-design.html" rel="alternate"></link><published>2025-05-10T00:00:00+07:00</published><updated>2025-05-10T00:00:00+07:00</updated><author><name>Tung Nguyen</name></author><id>tag:tungnguyen1610.github.io,2025-05-10:/Tung_Blog/digital-design/general-digital-design.html</id><summary type="html">&lt;p&gt;Combinational logic and sequential logic&lt;/p&gt;</summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Timing Basics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Setup Time&lt;/strong&gt;: Time input must be stable &lt;strong&gt;before&lt;/strong&gt; clock edge.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hold Time&lt;/strong&gt;: Time input must be stable &lt;strong&gt;after&lt;/strong&gt; clock edge.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aperture Time&lt;/strong&gt;: &lt;code&gt;Setup + Hold&lt;/code&gt; time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recovery Time&lt;/strong&gt;: Time async reset/set must be &lt;strong&gt;inactive before&lt;/strong&gt; clock edge.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Removal Time&lt;/strong&gt;: Time async reset/set must be &lt;strong&gt;inactive after&lt;/strong&gt; clock edge.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Metastability&lt;/strong&gt;: Flip-flops enter unpredictable states if timing is violated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fanout&lt;/strong&gt;: Number of gate inputs driven by a logic output.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Combinational Logic&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hazard&lt;/strong&gt;: Glitches in outputs due to gate delays and improper logic design.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Finite State Machines (FSM)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Encoding Styles&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Binary&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gray&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-hot&lt;/strong&gt;: One bit is HIGH, others LOW.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-cold&lt;/strong&gt;: One bit is LOW, others HIGH.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Clock Domain Crossing (CDC)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Transferring data between &lt;strong&gt;different clock domains&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Prevent metastability using:&lt;/li&gt;
&lt;li&gt;2/3 stage synchronizers&lt;/li&gt;
&lt;li&gt;To be added.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Digital Design"></category></entry><entry><title>SystemVerilog Coding Essentials</title><link href="https://tungnguyen1610.github.io/Tung_Blog/digital-design/systemverilog-coding-essentials.html" rel="alternate"></link><published>2025-05-10T00:00:00+07:00</published><updated>2025-05-10T00:00:00+07:00</updated><author><name>Tung Nguyen</name></author><id>tag:tungnguyen1610.github.io,2025-05-10:/Tung_Blog/digital-design/systemverilog-coding-essentials.html</id><summary type="html">&lt;p&gt;SystemVerilog concepts including assignments, procedures, and language features.&lt;/p&gt;</summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Assignments in SystemVerilog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Blocking Assignment (&lt;code&gt;=&lt;/code&gt;)&lt;/strong&gt;: Executes sequentially.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Non-Blocking Assignment (&lt;code&gt;&amp;lt;=&lt;/code&gt;)&lt;/strong&gt;: All updates scheduled at end of time step.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Types of Assignments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Procedural Assignments&lt;/strong&gt;: Used in &lt;code&gt;always&lt;/code&gt;, &lt;code&gt;initial&lt;/code&gt;, &lt;code&gt;task&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continuous Assignments&lt;/strong&gt;: Assigned directly to &lt;code&gt;wire&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, and &lt;code&gt;case&lt;/code&gt; must be used &lt;strong&gt;within procedural blocks&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;SystemVerilog Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Classes &amp;amp; Inheritance&lt;/strong&gt;: For OOP-style modeling.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Randomization&lt;/strong&gt;: Use &lt;code&gt;rand&lt;/code&gt; and &lt;code&gt;constraint&lt;/code&gt; for random test generation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bit Ordering&lt;/strong&gt;: &lt;code&gt;[2:0]&lt;/code&gt; means MSB (&lt;code&gt;2&lt;/code&gt;) to LSB (&lt;code&gt;0&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Modules&lt;/h2&gt;
&lt;p&gt;```systemverilog
module example (
  input logic clk,
  input logic rst,
  output logic [2:0] out
);
// ...
endmodule&lt;/p&gt;</content><category term="Digital Design"></category></entry></feed>